#!/usr/bin/env python3
"""
Script de correction pour les probl√®mes Windows sp√©cifiques.

Corrige les probl√®mes PyTorch et de d√©pendances sur Windows.
"""

import os
import subprocess
import sys
import tempfile
from pathlib import Path


def check_visual_cpp():
    """V√©rifie et guide pour Visual C++ Redistributables."""
    print("üîç V√©rification Visual C++ Redistributables...")
    
    # Test simple d'import qui √©choue souvent sans VC++
    try:
        import ctypes
        # Test de base des DLL syst√®me
        kernel32 = ctypes.windll.kernel32
        print("‚úÖ DLL syst√®me OK")
        return True
    except Exception:
        print("‚ùå Probl√®me DLL syst√®me d√©tect√©")
        print("üìã Action requise : Installez Visual C++ Redistributables")
        print("   T√©l√©chargez : https://aka.ms/vs/17/release/vc_redist.x64.exe")
        return False


def fix_pytorch_windows():
    """Correction sp√©cifique PyTorch Windows."""
    print("üîß Correction PyTorch pour Windows...")
    
    commands = [
        # Nettoyage cache pip
        ([sys.executable, "-m", "pip", "cache", "purge"], "Nettoyage cache pip"),
        
        # D√©sinstallation PyTorch
        ([sys.executable, "-m", "pip", "uninstall", "torch", "torchvision", "torchaudio", "-y"], 
         "D√©sinstallation PyTorch"),
        
        # Installation PyTorch CPU (plus stable sur Windows)
        ([sys.executable, "-m", "pip", "install", "torch", "torchvision", "torchaudio", 
          "--index-url", "https://download.pytorch.org/whl/cpu"], 
         "Installation PyTorch CPU"),
    ]
    
    for cmd, desc in commands:
        print(f"üîÑ {desc}...")
        try:
            result = subprocess.run(cmd, check=False, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {desc} - OK")
            else:
                print(f"‚ö†Ô∏è  {desc} - Avertissement")
                if result.stderr:
                    print(f"   D√©tail: {result.stderr.strip()[:100]}")
        except Exception as e:
            print(f"‚ùå {desc} - Erreur: {e}")


def fix_path_issues():
    """Correction des probl√®mes de PATH Windows."""
    print("üîß V√©rification PATH...")
    
    # Chemin Scripts Python utilisateur
    user_scripts = Path.home() / "AppData" / "Roaming" / "Python" / f"Python{sys.version_info.major}{sys.version_info.minor}" / "Scripts"
    
    current_path = os.environ.get("PATH", "")
    
    if str(user_scripts) not in current_path:
        print(f"‚ö†Ô∏è  Scripts Python pas dans PATH: {user_scripts}")
        print("üìã Pour corriger d√©finitivement, ajoutez √† votre PATH syst√®me :")
        print(f"   {user_scripts}")
        
        # Ajout temporaire pour cette session
        os.environ["PATH"] = f"{user_scripts};{current_path}"
        print("‚úÖ PATH temporaire ajust√© pour cette session")
    else:
        print("‚úÖ PATH Scripts Python OK")


def test_basic_imports():
    """Test des imports de base avec gestion d'erreur."""
    print("üß™ Test des imports critiques...")
    
    # Test sans PyTorch d'abord
    try:
        import numpy
        print("‚úÖ NumPy OK")
    except Exception as e:
        print(f"‚ùå NumPy √©chec: {e}")
        return False
    
    try:
        import transformers
        print("‚úÖ Transformers OK")
    except Exception as e:
        print(f"‚ùå Transformers √©chec: {e}")
        return False
    
    # Test PyTorch en dernier
    try:
        import torch
        print(f"‚úÖ PyTorch OK (version: {torch.__version__})")
        print(f"   CUDA disponible: {torch.cuda.is_available()}")
        return True
    except Exception as e:
        print(f"‚ùå PyTorch √©chec: {e}")
        return False


def create_windows_env():
    """Cr√©e un .env adapt√© Windows."""
    print("üîß Configuration .env pour Windows...")
    
    env_content = """# Configuration Windows pour inference-optim-llm
MODEL_ID=gpt2
BATCH_SIZE=1
MAX_NEW_TOKENS=32
CUDA_VISIBLE_DEVICES=0

# Cache Windows
HF_HOME=C:/Users/%USERNAME%/.cache/huggingface

# Configuration CPU (plus stable sur Windows)
TORCH_DEVICE=cpu
"""
    
    env_file = Path(".env")
    env_file.write_text(env_content, encoding="utf-8")
    print("‚úÖ Fichier .env cr√©√© (config CPU Windows)")


def test_cli_basic():
    """Test CLI basique sans d√©pendances lourdes."""
    print("üß™ Test CLI basique...")
    
    try:
        # Test import du module CLI sans ex√©cution
        import importlib.util
        
        cli_path = Path(__file__).parent / "inference_optim_llm" / "cli.py"
        if not cli_path.exists():
            print("‚ùå Fichier CLI introuvable")
            return False
        
        # Test d'aide avec timeout court
        result = subprocess.run([
            sys.executable, "-c", 
            "import sys; sys.path.insert(0, '.'); "
            "try: from inference_optim_llm.cli import app; print('CLI_OK')\n"
            "except Exception as e: print(f'CLI_ERROR: {e}')"
        ], capture_output=True, text=True, timeout=10)
        
        if "CLI_OK" in result.stdout:
            print("‚úÖ CLI importable")
            return True
        else:
            print(f"‚ùå CLI non importable: {result.stdout}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test CLI: {e}")
        return False


def main():
    """Point d'entr√©e principal."""
    print("üîß Correction des probl√®mes Windows - inference-optim-llm")
    print("=" * 65)
    
    # 1. V√©rification Visual C++
    check_visual_cpp()
    
    # 2. Correction PATH
    fix_path_issues()
    
    # 3. Correction PyTorch
    fix_pytorch_windows()
    
    # 4. Test imports
    imports_ok = test_basic_imports()
    
    # 5. Configuration environnement
    create_windows_env()
    
    # 6. Test CLI basique
    cli_ok = test_cli_basic()
    
    print("\n" + "=" * 65)
    if imports_ok and cli_ok:
        print("üéâ Corrections appliqu√©es avec succ√®s !")
        print("\nüìù Prochaines √©tapes :")
        print("   1. Red√©marrez votre terminal PowerShell")
        print("   2. Testez: python -c \"import torch; print('PyTorch OK')\"")
        print("   3. Testez: python scripts/validate_setup.py")
        print("   4. Si probl√®me persiste: Installez VC++ Redistributables")
    else:
        print("‚ùå Probl√®mes d√©tect√©s - Actions requises :")
        if not imports_ok:
            print("   - Installez Visual C++ Redistributables 2015-2022")
            print("   - Red√©marrez et relancez ce script")
        if not cli_ok:
            print("   - V√©rifiez l'installation du package: pip install -e .")
    
    print(f"\nüí° En cas de probl√®me persistant :")
    print("   - Utilisez un environnement conda/venv d√©di√©")
    print("   - Installez PyTorch via conda : conda install pytorch cpuonly -c pytorch")


if __name__ == "__main__":
    main()