{
  "name": "Agentic RAG V2",
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4.1",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "id": "7afe5a6d-e638-483a-a8b0-1017d45dab0e",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -480,
        336
      ],
      "credentials": {
        "openAiApi": {
          "id": "xt41n8XYnTUG3OQ5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content || $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID').first().json.file_id }}"
              },
              {
                "name": "file_title",
                "value": "={{ $('Set File ID').first().json.file_title }}"
              }
            ]
          }
        }
      },
      "id": "8a7c69c4-d42c-41ea-89fa-2ececdd52512",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1328,
        1056
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "7a477818-f731-4bb3-8b08-ec553e71071e",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1120,
        1056
      ],
      "credentials": {
        "openAiApi": {
          "id": "xt41n8XYnTUG3OQ5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## RAG Tool",
        "height": 561,
        "width": 375,
        "color": 4
      },
      "id": "874f24ad-5432-4363-bf87-97bd7070c260",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        288,
        16
      ]
    },
    {
      "parameters": {
        "content": "## Dosier Google Drive -> Vector DB",
        "height": 867,
        "width": 3073,
        "color": 5
      },
      "id": "56373d65-28b0-4db2-b791-7bc615ce697c",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1424,
        576
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "1e0cf5d6-bcad-4209-b2df-925329dbb2f2",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -336,
        800
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Wuszc2M4SOfvCpUt",
          "name": "Google Drive - Benoit"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1X5zzvTX0Vn-YOZYVZ-NtvJjVM3U6HImV",
          "mode": "list",
          "cachedResultName": "Agentic RAG V2",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1X5zzvTX0Vn-YOZYVZ-NtvJjVM3U6HImV"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "d7055c77-80b3-4849-8dbd-43a7644ce7fe",
      "name": "File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1360,
        624
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Wuszc2M4SOfvCpUt",
          "name": "Google Drive - Benoit"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1X5zzvTX0Vn-YOZYVZ-NtvJjVM3U6HImV",
          "mode": "list",
          "cachedResultName": "Agentic RAG V2",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1X5zzvTX0Vn-YOZYVZ-NtvJjVM3U6HImV"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "fcd93fc1-cb85-490d-89fd-7bd5620913fc",
      "name": "File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1360,
        784
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Wuszc2M4SOfvCpUt",
          "name": "Google Drive - Benoit"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "5d8594cd-4c99-47c1-b490-40478b483ca3",
      "name": "Extract Document Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        368,
        1200
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "922e5150-1e30-43fc-9b45-92efb3c69577",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -304,
        288
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b5b6e6ad-a0a9-4169-b488-a0e78e0acade",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1008,
        784
      ]
    },
    {
      "parameters": {
        "content": "## RAG AI Agent V2",
        "height": 561,
        "width": 1004
      },
      "id": "bc41bd90-1585-4703-9aa4-8ecf9338fee9",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -720,
        16
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "941a662e-f930-423e-9708-6f4f0b9b0b68",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1072,
        -336
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b99c77ed-805b-45ce-b229-ff7a2d06defb",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -416,
        96
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "ad7352fd-560c-4559-b533-894b132dadb1",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -688,
        96
      ],
      "webhookId": "e104e40e-6134-4825-a6f0-8a646d882662"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bf4dd093-bb02-472c-9454-7ab9af97bd1d",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "33c21b4a-0811-47e9-865d-80bdb56655c0",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -688,
        288
      ],
      "webhookId": "bf4dd093-bb02-472c-9454-7ab9af97bd1d",
      "credentials": {
        "httpHeaderAuth": {
          "id": "EuvqpjHxcj6ckcVf",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "bf0c0388-6ed3-42b9-88bf-77590da87327",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        368,
        1024
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "3968ca13-7c68-45b1-9dbc-57ebd05d2675",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        576,
        592
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "cd2e9bf6-232d-49fe-b50b-ea790f7c68bd",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        800,
        656
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "EXCEL"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "=application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5fe78f9b-2ff3-4adc-954e-53bfce35c142"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b69f5605-0179-4b02-9a32-e34bb085f82d",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEXT"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "7911b38c-984e-4a27-a0c3-853f655045be",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -144,
        752
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "2ba8d07e-7b47-448a-a60f-a61fba275be5",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        368,
        592
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f422e2e0-381c-46ea-8f38-3f58c501d8b9",
              "name": "schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "bb07c71e-5b60-4795-864c-cc3845b6bc46",
              "name": "data",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        608
      ],
      "id": "0ce1f8dd-a288-443c-988e-24cc11d35e38",
      "name": "Set Schema"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        368,
        768
      ],
      "id": "69617177-3976-4856-b025-cb3f8a5cc641",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "content": "## Setup des tables",
        "height": 460,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1424,
        16
      ],
      "typeVersion": 1,
      "id": "44813c7a-e9e1-41f5-81a1-f06d7b303632",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1136,
        96
      ],
      "id": "d12a4bd3-e730-4c39-9da3-ce89c2e08d99",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES document_metadata(id),\n    row_data JSONB  -- Store the actual row data\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1136,
        336
      ],
      "id": "72dc14d8-5136-4195-8521-0eb3539e9df9",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Utilisez cet outil pour récupérer tous les documents disponibles, y compris le schéma de la table si le fichier est un fichier CSV ou Excel.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -160,
        288
      ],
      "id": "d7600301-af89-4fe1-baef-a3ac5d41cf7a",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Étant donné un ID de fichier, récupère le texte du document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(text, ' ') as document_text\nFROM documents_pg\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        0,
        288
      ],
      "id": "3224a296-5684-41d7-aeea-895eb7e20eed",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Run a SQL query - use this to query from the document_rows table once you know the file ID. \n\nIMPORTANT: All data is stored in the JSONB field 'row_data'. Never reference columns directly.\n\nRequired syntax:\n- Access fields: row_data->>'field_name'\n- Numeric operations: (row_data->>'numeric_field')::numeric\n- Group by: GROUP BY row_data->>'field_name'\n\nExemple 1 : \n\n```\nSELECT AVG((row_data->>'revenue')::numeric) FROM document_rows WHERE dataset_id = '123';\n```\n\nExemple 2 : \n\n```\nSELECT row_data->>'category' as category, SUM((row_data->>'sales')::numeric) as total_sales FROM document_rows WHERE dataset_id = '123' GROUP BY row_data->>'category';\n```\n\nDataset_id is the file_id. All filtering and grouping must use the row_data JSONB syntax.",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        144,
        288
      ],
      "id": "1b22460b-58d4-40aa-8569-0471e9679137",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        336,
        416
      ],
      "id": "e9419eb1-434f-48bb-9e75-e8963093ab28",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "xt41n8XYnTUG3OQ5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1184,
        624
      ],
      "id": "9164e860-b41e-4deb-90c5-f1390b85cbe4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "title": "={{ $('Set File ID').item.json.file_title }}",
            "url": "={{ $('Set File ID').item.json.file_url }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -496,
        640
      ],
      "id": "1776e0b8-70ef-4113-b28b-0475c1913057",
      "name": "Insert Document Metadata",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_rows",
          "mode": "list",
          "cachedResultName": "document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        576,
        768
      ],
      "id": "0b81564f-ef05-4733-a766-9550c1224d01",
      "name": "Insert Table Rows",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1440,
        608
      ],
      "id": "52dd2153-c529-4fcf-a9a8-d27408ff1bac",
      "name": "Update Schema for Document Metadata",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.rerankerCohere",
      "typeVersion": 1,
      "position": [
        528,
        400
      ],
      "id": "5b42baf7-1ce0-42c5-8e2b-2591435dc4db",
      "name": "Reranker Cohere",
      "credentials": {
        "cohereApi": {
          "id": "A7mV7gsOeu5hu5tr",
          "name": "CohereApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": "documents_pg",
        "topK": 25,
        "useReranker": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        352,
        272
      ],
      "id": "ba3086fa-2b2c-402e-a78e-a5075ff366bf",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "documents_pg",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        1200,
        800
      ],
      "id": "1269ee15-84e3-4223-964b-21bd4e541574",
      "name": "Postgres PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DO $$\nBEGIN\n    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'documents_pg') THEN\n        EXECUTE 'DELETE FROM documents_pg WHERE metadata->>''file_id'' LIKE ''%' || $1 || '%''';\n    END IF;\nEND\n$$;",
        "options": {
          "queryReplacement": "={{ $json.file_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -832,
        640
      ],
      "id": "1f1d4ff2-034f-4e16-b7c9-1fe1c88cd6f7",
      "name": "Delete Old Data Rows",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM document_rows\nWHERE dataset_id LIKE '%' || $1 || '%';",
        "options": {
          "queryReplacement": "={{ $('Set File ID').item.json.file_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -656,
        800
      ],
      "id": "d34958f5-29d9-4b35-b58e-727e322f3147",
      "name": "Delete Old Doc Rows",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1408,
        1200
      ],
      "id": "32b20f3c-05f7-4039-9fb4-7a9b21532e84",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "code": {
          "execute": {
            "code": "const { PromptTemplate } = require('@langchain/core/prompts');\n\nconst documentContent = $input.item.json?.data || $input.item.json?.text;\nconst maxChunkSize = 1000;\nconst minChunkSize = 400;\n\nif (!documentContent) {\n    throw new Error('No document found in input');\n}\n\nconst llm = await this.getInputConnectionData('ai_languageModel', 0);\n\nfunction cleanText(text) {\n    return text.replace(/\\s+/g, ' ').trim();\n}\n\nconst chunks = [];\nlet remainingText = cleanText(documentContent);\nlet chunkNumber = 1;\n\nif (remainingText.length <= maxChunkSize) {\n    chunks.push({\n        content: remainingText,\n        chunk: chunkNumber,\n        chunk_size: remainingText.length\n    });\n} else {\n    while (remainingText) {\n        const textToAnalyze = remainingText.substring(0, maxChunkSize);\n        \n        const promptText = `You are analyzing a document to find the best transition point to split it into meaningful sections.\n\nYour goal: Keep related content together and split where topics naturally transition.\n\nRead this text carefully and identify where one topic/section ends and another begins:\n\n${textToAnalyze}\n\nFind the best transition point that occurs BEFORE character position ${maxChunkSize}.\n\nLook for:\n- Section headings or topic changes\n- Paragraph boundaries where the subject shifts\n- Complete conclusions before new ideas start\n- Natural breaks between different aspects of the content\n\nOutput the LAST WORD that appears right before your chosen split point.\nJust the single word itself, nothing else.\nExample: If you want to split after \"The company was founded in 2022.\" then output: \"2022\"`;\n        \n        const prompt = PromptTemplate.fromTemplate(promptText);\n        const chain = prompt.pipe(llm);\n        \n        let breakPoint = maxChunkSize;\n        \n        try {\n            const response = await chain.invoke();\n            const responseText = response.content || response.text || response.toString();\n            const breakWord = responseText.trim();\n            \n            if (breakWord) {\n                // Find the last occurrence of this word in the text to analyze\n                const wordIndex = textToAnalyze.lastIndexOf(breakWord);\n                if (wordIndex !== -1) {\n                    // Split after the word (including any punctuation that follows)\n                    breakPoint = wordIndex + breakWord.length;\n                    // Move past any punctuation or single space after the word\n                    while (breakPoint < textToAnalyze.length && \n                           (textToAnalyze[breakPoint] === '.' || \n                            textToAnalyze[breakPoint] === '!' || \n                            textToAnalyze[breakPoint] === '?' || \n                            textToAnalyze[breakPoint] === ',' || \n                            textToAnalyze[breakPoint] === ';' || \n                            textToAnalyze[breakPoint] === ':' || \n                            textToAnalyze[breakPoint] === ' ')) {\n                        breakPoint++;\n                        // Stop after moving past one space\n                        if (textToAnalyze[breakPoint - 1] === ' ') break;\n                    }\n                    breakPoint = Math.min(breakPoint, maxChunkSize);\n                }\n            }\n        } catch (error) {\n            console.log('LLM failed to determine breakpoint, using max size:', error.message);\n            breakPoint = maxChunkSize;\n        }\n        \n        const chunk = remainingText.substring(0, breakPoint).trim();\n        \n        if (chunk) {\n            chunks.push({\n                content: chunk,\n                chunk: chunkNumber,\n                chunk_size: chunk.length\n            });\n            chunkNumber++;\n        }\n        \n        remainingText = remainingText.substring(breakPoint).trim();\n        \n        if (!remainingText) {\n            break;\n        }\n    }\n}\n\n// Merge chunks that are below minimum size with adjacent chunks if possible\nlet i = 0;\nwhile (i < chunks.length) {\n    if (chunks[i].chunk_size < minChunkSize) {\n        // Try to merge with next chunk first if it exists and won't exceed max\n        if (i + 1 < chunks.length && \n            chunks[i].chunk_size + chunks[i + 1].chunk_size <= maxChunkSize) {\n            // Merge current with next\n            chunks[i].content += ' ' + chunks[i + 1].content;\n            chunks[i].chunk_size = chunks[i].content.length;\n            chunks.splice(i + 1, 1);\n            // Don't increment i, check this chunk again in case it's still small\n        } \n        // Otherwise try to merge with previous chunk if it exists and won't exceed max\n        else if (i > 0 && \n                 chunks[i - 1].chunk_size + chunks[i].chunk_size <= maxChunkSize) {\n            // Merge current into previous\n            chunks[i - 1].content += ' ' + chunks[i].content;\n            chunks[i - 1].chunk_size = chunks[i - 1].content.length;\n            chunks.splice(i, 1);\n            // Don't increment i, we removed current chunk\n        } else {\n            // Can't merge without exceeding max, move on\n            i++;\n        }\n    } else {\n        i++;\n    }\n}\n\nconst returnData = chunks.map(chunk => ({\n    json: chunk\n}));\n\nreturn returnData;"
          }
        },
        "inputs": {
          "input": [
            {
              "type": "ai_languageModel",
              "maxConnections": 1,
              "required": true
            },
            {
              "type": "main",
              "required": true
            }
          ]
        },
        "outputs": {
          "output": [
            {
              "type": "main"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.code",
      "typeVersion": 1,
      "position": [
        640,
        1024
      ],
      "id": "f8a62425-de08-43be-b9cf-338582f11981",
      "name": "LangChain Code"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        720,
        1216
      ],
      "id": "17f4fc64-441a-49be-975c-c1e27f6167ec",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "xt41n8XYnTUG3OQ5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1408,
        224
      ],
      "id": "d4209ff1-6024-419f-ba84-b49fb7015bd2",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get the available fields/columns for a specific dataset - use this BEFORE writing SQL queries to ensure you use the correct field names. This tool shows all available fields in the row_data JSONB for the specified dataset_id.\n\nParameters:\n- dataset_id (required): The ID of the dataset to inspect\n\nReturns: List of all available field names in the JSONB data",
        "operation": "executeQuery",
        "query": "SELECT DISTINCT jsonb_object_keys(row_data) as field_name \nFROM document_rows \nWHERE dataset_id = $1\nORDER BY field_name;",
        "options": {
          "queryReplacement": "={{ $fromAI('dataset_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        0,
        448
      ],
      "id": "9f9ab186-9825-4acc-9e3c-00607dea0aee",
      "name": "Validate Fields",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get sample rows to understand data structure",
        "operation": "executeQuery",
        "query": "SELECT row_data FROM document_rows WHERE dataset_id = $1 LIMIT 5;",
        "options": {
          "queryReplacement": "={{ $fromAI(\"dataset_id\") }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -304,
        448
      ],
      "id": "9cb4bdf7-f305-4d43-a35c-306a60278b7e",
      "name": "Echantillonage",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get unique values for a specific field - use after schema validation",
        "operation": "executeQuery",
        "query": "SELECT DISTINCT row_data->>$2 as value, COUNT(*) as count FROM document_rows WHERE dataset_id = $1 AND row_data->>$2 IS NOT NULL GROUP BY row_data->>$2 ORDER BY count DESC LIMIT 20",
        "options": {
          "queryReplacement": "={{ $fromAI(\"dataset_id\") }},{{ $fromAI(\"field_name\") }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -160,
        448
      ],
      "id": "00bd5a4f-e8de-4885-931f-e80f945cff2f",
      "name": "Analyse des Valeurs",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Analyse faite par L'agent IA : \n\nQuestion de base posé par l'utilisateur : \n- {{ $json.output.question }}\n\nSQL query réalisé :\n\n```\n{{ $json.output.sql_query }}\n```\n\nMAPPED VALUES :  \n{{ $json.output.mapping.toJsonString() }}\n\nRESULTAT FOURNIS : \n\n{{ $json.output.result }}\n\nDONNEE UTILSIEE : \nDataset_id : {{ $json.output.data_used.dataset_id }}\nNombres de lignes analysés : {{ $json.output.data_used.rows_analyzed }}",
        "options": {
          "systemMessage": "=# Agent Validateur Financier\n\nVous aidez les directeurs financiers en pointant les limites des analyses et en suggérant des alternatives. Le CFO reste le décideur final.\n\n## Outils disponibles\n\n1. **sample_dataset(dataset_id)** - Examiner le jeu de données\n2. **get_field_values(dataset_id, field_name)** - Analyser les valeurs d'un champ\n3. **get_dataset_schema(dataset_id)** - Récupérer les noms des champs\n\n## Mission\n\nAnalysez le JSON reçu, utilisez les outils pour identifier les points d'attention et proposez des alternatives que le CFO pourra considérer.\n\n## Processus\n\n1. **Examinez la méthodologie** : Où l'analyse pourrait-elle manquer de précision ?\n2. **Identifiez les alternatives** : Quelles autres approches sont possibles avec les données ?\n3. **Suggérez des options** pour que le CFO puisse décider\n\n## Format de réponse\n\n```\n📊 **ANALYSE FINANCIÈRE CONSOLIDÉE**\n\n**Question analysée :** [Question originale]\n\n**Résultat initial :**\n[Résultat de l'agent RAG]\n\n🔍 **POINTS D'ATTENTION**\n\n⚠️ **Limites de l'approche actuelle :**\n- [Ce qui pourrait manquer de précision]\n\n💡 **Alternatives possibles :**\n- Option A : [Approche alternative avec les données existantes]\n- Option B : [Autre angle d'analyse possible]\n\n📋 **Recommandations pour le CFO :**\n- [Suggestions d'actions ou d'analyses complémentaires]\n- [Points à considérer pour la prise de décision]\n```\n\n## Règles\n\n- Proposez, ne corrigez pas\n- Le CFO connaît mieux le contexte business\n- Suggérez des alternatives pratiques avec les données disponibles\n- Restez dans un rôle de support analytique"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        656,
        -336
      ],
      "id": "f4e06237-ac5f-40f9-ab2c-6d71d640b45f",
      "name": "Agent CFO Validateur"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        576,
        -128
      ],
      "id": "db483113-2af2-4230-b8ba-43061ae62eea",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "xt41n8XYnTUG3OQ5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        736,
        -144
      ],
      "id": "35b1a5eb-9e67-46e6-b852-0e8d2cfb7762",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"RAG Agent Simple Output\",\n  \"type\": \"object\",\n  \"required\": [\"question\", \"sql_query\", \"mapping\", \"result\"],\n  \"properties\": {\n    \n    \"question\": {\n      \"type\": \"string\",\n      \"description\": \"Question originale de l'utilisateur\"\n    },\n    \n    \"sql_query\": {\n      \"type\": \"string\",\n      \"description\": \"Requête SQL exécutée\"\n    },\n    \n    \"mapping\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"concept\": {\n            \"type\": \"string\",\n            \"description\": \"Concept demandé (LTV, CAC, etc.)\"\n          },\n          \"mapped_to\": {\n            \"type\": \"string\", \n            \"description\": \"Champ/valeur utilisé\"\n          }\n        }\n      }\n    },\n    \n    \"result\": {\n      \"type\": \"string\",\n      \"description\": \"Réponse finale donnée à l'utilisateur\"\n    },\n    \n    \"data_used\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"dataset_id\": {\n          \"type\": \"string\"\n        },\n        \"rows_analyzed\": {\n          \"type\": \"integer\"\n        }\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        144,
        448
      ],
      "id": "d56f9a62-3694-4e3e-9ef6-b492fe2b0722",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get the available fields/columns for a specific dataset - use this BEFORE writing SQL queries to ensure you use the correct field names. This tool shows all available fields in the row_data JSONB for the specified dataset_id.\n\nParameters:\n- dataset_id (required): The ID of the dataset to inspect\n\nReturns: List of all available field names in the JSONB data",
        "operation": "executeQuery",
        "query": "SELECT DISTINCT jsonb_object_keys(row_data) as field_name \nFROM document_rows \nWHERE dataset_id = $1\nORDER BY field_name;",
        "options": {
          "queryReplacement": "={{ $fromAI('dataset_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1280,
        -160
      ],
      "id": "8c8ba6ea-2851-439e-a5f6-4bf7951664bf",
      "name": "Validate Fields1",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get sample rows to understand data structure",
        "operation": "executeQuery",
        "query": "SELECT row_data FROM document_rows WHERE dataset_id = $1 LIMIT 5;",
        "options": {
          "queryReplacement": "={{ $fromAI(\"dataset_id\") }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        960,
        -160
      ],
      "id": "c64b65d3-e4ba-4435-9fea-344b85247ec8",
      "name": "Echantillonage1",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get unique values for a specific field - use after schema validation",
        "operation": "executeQuery",
        "query": "SELECT DISTINCT row_data->>$2 as value, COUNT(*) as count FROM document_rows WHERE dataset_id = $1 AND row_data->>$2 IS NOT NULL GROUP BY row_data->>$2 ORDER BY count DESC LIMIT 20",
        "options": {
          "queryReplacement": "={{ $fromAI(\"dataset_id\") }},{{ $fromAI(\"field_name\") }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1120,
        -160
      ],
      "id": "c7b30233-b7d2-4c2d-8a84-9f123c9f9039",
      "name": "Analyse des Valeurs1",
      "credentials": {
        "postgres": {
          "id": "hIiFbogv3izQajh9",
          "name": "Supabase - agentic_rag_v2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Assistant Analyse de Documents\n\nVous analysez des documents textuels (RAG) et tabulaires (SQL). \n\n## SQL - Règles Strictes\n- Données dans JSONB `row_data` uniquement\n- Syntaxe: `row_data->>'field_name'`, cast numeric: `(row_data->>'amount')::numeric`\n- JAMAIS de colonnes directes, toujours `GROUP BY row_data->>'field'`\n\n## Processus Obligatoire SQL\n1. **get_dataset_schema(dataset_id)** - Valider champs disponibles\n2. **get_field_values(dataset_id, field_name)** - Si valeurs spécifiques demandées\n3. **Mapper concepts**: LTV→Vente, CAC→Investissement, CA→revenue/sales\n4. **Requête SQL** avec vrais champs trouvés\n5. **Expliquer mapping** à l'utilisateur\n\n## Gestion Erreurs\n- Champ absent → proposer alternatives disponibles\n- Valeur absente → montrer valeurs possibles  \n- Ambiguïté → demander précision\n\n## Exemple\nDemande: \"LTV par division\"\n1. get_dataset_schema() → trouve: division, type_transaction, montant_ht\n2. get_field_values(dataset_id, 'type_transaction') → Vente, Achat, Salaire...\n3. Dire: \"LTV = transactions 'Vente' dans vos données\"\n4. SQL: `SELECT row_data->>'division', SUM((row_data->>'montant_ht')::numeric) FROM document_rows WHERE dataset_id='xxx' AND row_data->>'type_transaction'='Vente' GROUP BY row_data->>'division'`\n\n## Stratégie\n- RAG d'abord sauf si agrégation nécessaire (sommes, moyennes, groupements)\n- Toujours valider avant SQL\n- Transparence sur mappings effectués\n- Ne pas inventer de champs/valeurs"
        }
      },
      "id": "306f7c8c-b95b-4722-b325-1f5cc9d0915a",
      "name": "RAG AI Agent V2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -208,
        96
      ]
    },
    {
      "parameters": {
        "content": "## Agent Insights",
        "height": 417,
        "width": 1063,
        "color": 6
      },
      "id": "c899331b-9872-44f4-8aee-b0b73cbb8a3f",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        432,
        -416
      ]
    }
  ],
  "pinData": {
    "File Created": [
      {
        "json": {
          "parents": [
            "1X5zzvTX0Vn-YOZYVZ-NtvJjVM3U6HImV"
          ],
          "lastModifyingUser": {
            "displayName": "Benoit Ferrere",
            "kind": "drive#user",
            "me": true,
            "permissionId": "09633094949000699948",
            "emailAddress": "benoit.ferrere11@gmail.com",
            "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocKIz-Ww53yVWKKhdicYhEUgrnu794N_29gxvAcmyP--m7YHfNGh=s64"
          },
          "owners": [
            {
              "displayName": "Benoit Ferrere",
              "kind": "drive#user",
              "me": true,
              "permissionId": "09633094949000699948",
              "emailAddress": "benoit.ferrere11@gmail.com",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocKIz-Ww53yVWKKhdicYhEUgrnu794N_29gxvAcmyP--m7YHfNGh=s64"
            }
          ],
          "permissions": [
            {
              "kind": "drive#permission",
              "id": "09633094949000699948",
              "type": "user",
              "emailAddress": "benoit.ferrere11@gmail.com",
              "role": "owner",
              "displayName": "Benoit Ferrere",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocKIz-Ww53yVWKKhdicYhEUgrnu794N_29gxvAcmyP--m7YHfNGh=s64",
              "deleted": false,
              "pendingOwner": false
            }
          ],
          "spaces": [
            "drive"
          ],
          "capabilities": {
            "canAcceptOwnership": false,
            "canAddChildren": false,
            "canAddMyDriveParent": false,
            "canChangeCopyRequiresWriterPermission": true,
            "canChangeItemDownloadRestriction": true,
            "canChangeSecurityUpdateEnabled": false,
            "canChangeViewersCanCopyContent": true,
            "canComment": true,
            "canCopy": true,
            "canDelete": true,
            "canDisableInheritedPermissions": false,
            "canDownload": true,
            "canEdit": true,
            "canEnableInheritedPermissions": true,
            "canListChildren": false,
            "canModifyContent": true,
            "canModifyContentRestriction": true,
            "canModifyEditorContentRestriction": true,
            "canModifyOwnerContentRestriction": true,
            "canModifyLabels": false,
            "canMoveChildrenWithinDrive": false,
            "canMoveItemIntoTeamDrive": true,
            "canMoveItemOutOfDrive": true,
            "canMoveItemWithinDrive": true,
            "canReadLabels": false,
            "canReadRevisions": true,
            "canRemoveChildren": false,
            "canRemoveContentRestriction": false,
            "canRemoveMyDriveParent": true,
            "canRename": true,
            "canShare": true,
            "canTrash": true,
            "canUntrash": true
          },
          "permissionIds": [
            "09633094949000699948"
          ],
          "linkShareMetadata": {
            "securityUpdateEligible": false,
            "securityUpdateEnabled": true
          },
          "downloadRestrictions": {
            "itemDownloadRestriction": {
              "restrictedForReaders": false,
              "restrictedForWriters": false
            },
            "effectiveDownloadRestrictionWithContext": {
              "restrictedForReaders": false,
              "restrictedForWriters": false
            }
          },
          "kind": "drive#file",
          "id": "1JVG2SPQxg_-8iGoiSwuGXL6Jh8LybGl5",
          "name": "TechCorp SaaS - Product Overview.pdf",
          "mimeType": "application/pdf",
          "starred": false,
          "trashed": false,
          "explicitlyTrashed": false,
          "version": "3",
          "webContentLink": "https://drive.google.com/uc?id=1JVG2SPQxg_-8iGoiSwuGXL6Jh8LybGl5&export=download",
          "webViewLink": "https://drive.google.com/file/d/1JVG2SPQxg_-8iGoiSwuGXL6Jh8LybGl5/view?usp=drivesdk",
          "iconLink": "https://drive-thirdparty.googleusercontent.com/16/type/application/pdf",
          "hasThumbnail": true,
          "thumbnailLink": "https://lh3.googleusercontent.com/drive-storage/AJQWtBM5z5MeqPcXi0ec6IKUO971C0V2vvEgF49um9yw-CEpSQjCMY2ce_jtuNxvzl6qfP2CG27zg6Hcz2AMKaBiQVxVJxQ-h8wvlYfUObVLVkqvow=s220",
          "thumbnailVersion": "1",
          "viewedByMe": true,
          "viewedByMeTime": "2025-09-04T06:12:39.578Z",
          "createdTime": "2025-09-04T06:12:39.578Z",
          "modifiedTime": "2025-09-04T05:47:48.000Z",
          "modifiedByMeTime": "2025-09-04T05:47:48.000Z",
          "modifiedByMe": true,
          "shared": false,
          "ownedByMe": true,
          "viewersCanCopyContent": true,
          "copyRequiresWriterPermission": false,
          "writersCanShare": true,
          "originalFilename": "TechCorp SaaS - Product Overview.pdf",
          "fullFileExtension": "pdf",
          "fileExtension": "pdf",
          "md5Checksum": "f7c7ca73ac3be50e7fcc057a8179ceda",
          "sha1Checksum": "122d745992f42f84ba164b998a280a699ecf228e",
          "sha256Checksum": "49df451b318816721060369ece1d67d8832cf6d815b145a1682f815d9f6430eb",
          "size": "50054",
          "quotaBytesUsed": "50054",
          "headRevisionId": "0B1ymfdwQavCcQ2pDbk8yM05zYzJ0VC96d2kwTFdEQi8yVzlRPQ",
          "isAppAuthorized": false,
          "inheritedPermissionsDisabled": false
        }
      },
      {
        "json": {
          "parents": [
            "1X5zzvTX0Vn-YOZYVZ-NtvJjVM3U6HImV"
          ],
          "lastModifyingUser": {
            "displayName": "Benoit Ferrere",
            "kind": "drive#user",
            "me": true,
            "permissionId": "09633094949000699948",
            "emailAddress": "benoit.ferrere11@gmail.com",
            "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocKIz-Ww53yVWKKhdicYhEUgrnu794N_29gxvAcmyP--m7YHfNGh=s64"
          },
          "owners": [
            {
              "displayName": "Benoit Ferrere",
              "kind": "drive#user",
              "me": true,
              "permissionId": "09633094949000699948",
              "emailAddress": "benoit.ferrere11@gmail.com",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocKIz-Ww53yVWKKhdicYhEUgrnu794N_29gxvAcmyP--m7YHfNGh=s64"
            }
          ],
          "permissions": [
            {
              "kind": "drive#permission",
              "id": "09633094949000699948",
              "type": "user",
              "emailAddress": "benoit.ferrere11@gmail.com",
              "role": "owner",
              "displayName": "Benoit Ferrere",
              "photoLink": "https://lh3.googleusercontent.com/a/ACg8ocKIz-Ww53yVWKKhdicYhEUgrnu794N_29gxvAcmyP--m7YHfNGh=s64",
              "deleted": false,
              "pendingOwner": false
            }
          ],
          "spaces": [
            "drive"
          ],
          "capabilities": {
            "canAcceptOwnership": false,
            "canAddChildren": false,
            "canAddMyDriveParent": false,
            "canChangeCopyRequiresWriterPermission": true,
            "canChangeItemDownloadRestriction": true,
            "canChangeSecurityUpdateEnabled": false,
            "canChangeViewersCanCopyContent": true,
            "canComment": true,
            "canCopy": true,
            "canDelete": true,
            "canDisableInheritedPermissions": false,
            "canDownload": true,
            "canEdit": true,
            "canEnableInheritedPermissions": true,
            "canListChildren": false,
            "canModifyContent": true,
            "canModifyContentRestriction": true,
            "canModifyEditorContentRestriction": true,
            "canModifyOwnerContentRestriction": true,
            "canModifyLabels": false,
            "canMoveChildrenWithinDrive": false,
            "canMoveItemIntoTeamDrive": true,
            "canMoveItemOutOfDrive": true,
            "canMoveItemWithinDrive": true,
            "canReadLabels": false,
            "canReadRevisions": true,
            "canRemoveChildren": false,
            "canRemoveContentRestriction": false,
            "canRemoveMyDriveParent": true,
            "canRename": true,
            "canShare": true,
            "canTrash": true,
            "canUntrash": true
          },
          "permissionIds": [
            "09633094949000699948"
          ],
          "linkShareMetadata": {
            "securityUpdateEligible": false,
            "securityUpdateEnabled": true
          },
          "downloadRestrictions": {
            "itemDownloadRestriction": {
              "restrictedForReaders": false,
              "restrictedForWriters": false
            },
            "effectiveDownloadRestrictionWithContext": {
              "restrictedForReaders": false,
              "restrictedForWriters": false
            }
          },
          "kind": "drive#file",
          "id": "17jY5iow170l2npoan3tiiaq4zR_vwOuP",
          "name": "TechCorp_Donnees_Avancees_SQL_Analyses.xlsx",
          "mimeType": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "starred": false,
          "trashed": false,
          "explicitlyTrashed": false,
          "version": "3",
          "webContentLink": "https://drive.google.com/uc?id=17jY5iow170l2npoan3tiiaq4zR_vwOuP&export=download",
          "webViewLink": "https://docs.google.com/spreadsheets/d/17jY5iow170l2npoan3tiiaq4zR_vwOuP/edit?usp=drivesdk&ouid=115616027358622417024&rtpof=true&sd=true",
          "iconLink": "https://drive-thirdparty.googleusercontent.com/16/type/application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "hasThumbnail": true,
          "thumbnailLink": "https://lh3.googleusercontent.com/drive-storage/AJQWtBMqDb8494VzTojS4h-EFWvN3XC-7omh3sdZ0NS_5yyINZxpp45WNQgBe_5ta8qMG47Np5PG-xQ3phsXiXtDt5GuiJGLYvbjpWsASmVS-uLb9Q=s220",
          "thumbnailVersion": "1",
          "viewedByMe": true,
          "viewedByMeTime": "2025-09-04T06:12:41.715Z",
          "createdTime": "2025-09-04T06:12:41.715Z",
          "modifiedTime": "2025-09-04T05:26:57.000Z",
          "modifiedByMeTime": "2025-09-04T05:26:57.000Z",
          "modifiedByMe": true,
          "shared": false,
          "ownedByMe": true,
          "viewersCanCopyContent": true,
          "copyRequiresWriterPermission": false,
          "writersCanShare": true,
          "originalFilename": "TechCorp_Donnees_Avancees_SQL_Analyses.xlsx",
          "fullFileExtension": "xlsx",
          "fileExtension": "xlsx",
          "md5Checksum": "0547ea1707589a91bc5f535c64cd8d72",
          "sha1Checksum": "acdc95cdfed137a3ec889e62c5368063890168a3",
          "sha256Checksum": "f700ee8bf553d009b813ec6556765352d9cfacee80896700a6f09a1f97c84885",
          "size": "3344062",
          "quotaBytesUsed": "3344062",
          "headRevisionId": "0B1ymfdwQavCcb0xXNTBzVWplQlp6TVdqUCtHZzhnQUpsSUhFPQ",
          "isAppAuthorized": false,
          "inheritedPermissionsDisabled": false
        }
      }
    ]
  },
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Created": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text": {
      "main": [
        [
          {
            "node": "LangChain Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Delete Old Data Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "LangChain Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Set Schema",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres PGVector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema": {
      "main": [
        [
          {
            "node": "Update Schema for Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reranker Cohere": {
      "ai_reranker": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_reranker",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Rows": {
      "main": [
        [
          {
            "node": "Delete Old Doc Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Doc Rows": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "LangChain Code",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "LangChain Code": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Create Document Metadata Table",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Document Rows Table (for Tabular Data)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Table Rows": {
      "main": [
        []
      ]
    },
    "Validate Fields": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Echantillonage": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Analyse des Valeurs": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Agent CFO Validateur",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Agent CFO Validateur": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Agent CFO Validateur",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "RAG AI Agent V2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Echantillonage1": {
      "ai_tool": [
        [
          {
            "node": "Agent CFO Validateur",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Analyse des Valeurs1": {
      "ai_tool": [
        [
          {
            "node": "Agent CFO Validateur",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Validate Fields1": {
      "ai_tool": [
        [
          {
            "node": "Agent CFO Validateur",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent V2": {
      "main": [
        [
          {
            "node": "Agent CFO Validateur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cfc8d09e-2e06-404a-8589-ece99da29db8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ec2183fc8437e951957464bb61dc549eae1ea806fc112c23d91201bcf8eb2a9b"
  },
  "id": "kWjVQZ2fuVCZpEfH",
  "tags": []
}