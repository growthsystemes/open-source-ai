# Makefile pour TensorRT-LLM Benchmark
.PHONY: help build all pytorch tensorrt compare clean interactive setup

# Couleurs pour l'affichage
GREEN=\033[0;32m
YELLOW=\033[1;33m
CYAN=\033[0;36m
RED=\033[0;31m
NC=\033[0m # No Color

help: ## Affiche cette aide
	@echo "$(GREEN)üöÄ TensorRT-LLM Benchmark - Commandes disponibles:$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(CYAN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

setup: ## V√©rifie l'environnement et cr√©e les r√©pertoires
	@echo "$(YELLOW)üîç V√©rification de l'environnement...$(NC)"
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker requis$(NC)"; exit 1; }
	@command -v nvidia-smi >/dev/null 2>&1 || { echo "$(RED)‚ùå nvidia-smi requis$(NC)"; exit 1; }
	@docker run --rm --gpus all nvidia/cuda:12.0-base-ubuntu20.04 nvidia-smi >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker GPU support requis$(NC)"; exit 1; }
	@mkdir -p data/{models,engines,checkpoints,results}
	@echo "$(GREEN)‚úÖ Environnement pr√™t!$(NC)"

build: setup ## Construit le moteur TensorRT-LLM
	@echo "$(CYAN)üîß Construction du moteur TensorRT...$(NC)"
	docker-compose --profile build-only up build-engine

pytorch: setup ## Ex√©cute le benchmark PyTorch
	@echo "$(CYAN)üî• Benchmark PyTorch...$(NC)"
	docker-compose --profile pytorch-only up benchmark-pytorch

tensorrt: setup ## Ex√©cute le benchmark TensorRT-LLM
	@echo "$(CYAN)‚ö° Benchmark TensorRT...$(NC)"
	docker-compose --profile tensorrt-only up benchmark-tensorrt

compare: ## Compare les r√©sultats
	@echo "$(CYAN)üìä Comparaison des r√©sultats...$(NC)"
	docker-compose --profile compare-only up compare-results

all: setup build pytorch tensorrt compare ## Ex√©cute le pipeline complet
	@echo "$(GREEN)‚úÖ Pipeline complet termin√©!$(NC)"
	@echo "$(CYAN)üìä R√©sultats disponibles dans ./data/results/$(NC)"

auto: setup ## Ex√©cute le benchmark automatique (tout en une fois)
	@echo "$(CYAN)üîÑ Benchmark automatique...$(NC)"
	docker-compose --profile auto up benchmark-full

interactive: setup ## Lance un shell interactif dans le container
	@echo "$(CYAN)üñ•Ô∏è  Mode interactif...$(NC)"
	docker-compose --profile manual run --rm tensorrt-llm-benchmark

clean: ## Nettoie les donn√©es et containers
	@echo "$(YELLOW)üßπ Nettoyage...$(NC)"
	docker-compose down --volumes --remove-orphans
	rm -rf data/
	docker system prune -f

clean-docker: ## Nettoie les images Docker
	@echo "$(YELLOW)üßπ Nettoyage des images Docker...$(NC)"
	docker-compose down --rmi all --volumes --remove-orphans

results: ## Affiche un r√©sum√© des r√©sultats
	@echo "$(CYAN)üìä R√©sum√© des r√©sultats:$(NC)"
	@if [ -f data/results/benchmark_comparison_report.json ]; then \
		echo "$(GREEN)‚úÖ Rapport de comparaison trouv√©$(NC)"; \
		echo ""; \
		cat data/results/benchmark_comparison_report.json | jq -r '.speedup_analysis | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "Installez jq pour un affichage format√©"; \
	else \
		echo "$(RED)‚ùå Aucun rapport trouv√©. Ex√©cutez 'make all' d'abord.$(NC)"; \
	fi

logs: ## Affiche les logs du dernier run
	docker-compose logs --tail=50

status: ## V√©rifie le statut des containers
	@echo "$(CYAN)üìà Statut des containers:$(NC)"
	docker-compose ps

# Commandes de d√©veloppement
dev-build: ## Reconstruction de l'image Docker (pour d√©veloppement)
	docker-compose build --no-cache tensorrt-llm-benchmark

dev-shell: ## Shell de d√©veloppement avec volumes mont√©s
	docker-compose --profile manual run --rm -v $(PWD)/scripts:/workspace/scripts tensorrt-llm-benchmark bash

# Aliases populaires
benchmark: all ## Alias pour 'all'
run: auto ## Alias pour 'auto'
test: pytorch ## Alias pour 'pytorch' (test rapide)
