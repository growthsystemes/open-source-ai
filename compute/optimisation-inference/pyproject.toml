[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "inference-optim-llm"
version = "0.1.0"
description = "Optimisation d'inférence LLM avec comparaison baseline vs TensorRT-LLM"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Inference Optim Team", email = "team@example.com"}
]
keywords = ["llm", "inference", "tensorrt", "optimization", "benchmark"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.0.0",
    "transformers>=4.39.0",
    "huggingface-hub>=0.16.0",
    "typer>=0.9.0",
    "numpy>=1.21.0",
    "sentencepiece>=0.1.99",
    "accelerate>=0.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests",
]
gpu = [
    "pynvml>=11.0.0",
]
rich = [
    "rich>=13.0.0",
]
viz = [
    "matplotlib>=3.5.0",
]
all = [
    "inference-optim-llm[dev,gpu,rich,viz]"
]

[project.urls]
Homepage = "https://github.com/example/inference-optim-llm"
Repository = "https://github.com/example/inference-optim-llm"
Documentation = "https://github.com/example/inference-optim-llm/docs"
"Bug Reports" = "https://github.com/example/inference-optim-llm/issues"

[project.scripts]
iol = "inference_optim_llm.cli:app"

[tool.setuptools.packages.find]
include = ["inference_optim_llm*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"inference_optim_llm" = ["py.typed"]

# Configuration Ruff (linting et formatting)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
]
ignore = [
    "E501",  # line too long (géré par le formateur)
    "B008",  # Do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Use of assert detected
    "D",     # Missing docstring
]
"scripts/**/*.py" = [
    "T201",  # print statements OK in scripts
]

[tool.ruff.isort]
known-first-party = ["inference_optim_llm"]
force-single-line = true

# Configuration MyPy (type checking)
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignorer les imports manquants pour les dépendances optionnelles
[[tool.mypy.overrides]]
module = [
    "tensorrt_llm.*",
    "pynvml",
    "rich.*",
    "matplotlib.*",
]
ignore_missing_imports = true

# Configuration PyTest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Configuration de coverage
[tool.coverage.run]
source = ["inference_optim_llm"]
omit = [
    "tests/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]