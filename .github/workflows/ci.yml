# Workflow CI pour inference-optim-llm
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permet déclenchement manuel

env:
  PYTHON_VERSION: "3.10"

jobs:
  # ==========================================================================
  # Job de lint et vérifications statiques
  # ==========================================================================
  lint:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy types-requests
        # Installation des dépendances pour l'analyse statique
        pip install -e .
        
    - name: 🔍 Run ruff (linting)
      run: |
        ruff check inference_optim_llm/ scripts/ tests/
        ruff format --check inference_optim_llm/ scripts/ tests/
        
    - name: 🔍 Run mypy (type checking)
      run: |
        mypy inference_optim_llm/ --ignore-missing-imports
        
    - name: 📊 Generate lint report
      if: failure()
      run: |
        ruff check inference_optim_llm/ scripts/ tests/ --output-format=github

  # ==========================================================================
  # Job de tests unitaires
  # ==========================================================================
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        # Installation du package en mode développement
        pip install -e .
        
    - name: 🧪 Run unit tests
      run: |
        pytest tests/ -v --cov=inference_optim_llm --cov-report=xml --cov-report=term
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==========================================================================
  # Job de tests d'intégration (optionnel avec label)
  # ==========================================================================
  integration-test:
    name: 🔧 Integration Tests
    runs-on: ubuntu-latest
    # Exécution conditionnelle basée sur un label PR
    if: contains(github.event.pull_request.labels.*.name, 'needs-integration-test') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -e .
        
    - name: 🔧 Run integration tests
      run: |
        # Tests d'intégration légers (sans GPU)
        pytest tests/ -v -m "integration" || echo "No integration tests marked"
        
    - name: 📝 Test CLI commands
      run: |
        # Test des commandes CLI de base
        python -m inference_optim_llm.cli --help
        python -m inference_optim_llm.cli download --help
        python -m inference_optim_llm.cli build --help
        python -m inference_optim_llm.cli run --help
        python -m inference_optim_llm.cli bench --help

  # ==========================================================================
  # Job de smoke test GPU (conditionnel)
  # ==========================================================================
  smoke-test-gpu:
    name: 🚀 GPU Smoke Test
    runs-on: self-hosted  # Nécessite un runner avec GPU
    # Exécution très conditionnelle
    if: contains(github.event.pull_request.labels.*.name, 'needs-gpu') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python environment
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: 🔍 Check GPU availability
      run: |
        nvidia-smi
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
        
    - name: 🚀 Run minimal GPU test
      run: |
        # Test très basique avec un petit modèle
        echo "Testing minimal functionality..." 
        # Ici on pourrait ajouter un test avec un modèle très petit
        # Exemple: python scripts/run_baseline.py --model-id gpt2 --max-new-tokens 1
        
    - name: 📊 Collect GPU metrics
      if: always()
      run: |
        nvidia-smi --query-gpu=memory.used,memory.total,utilization.gpu --format=csv

  # ==========================================================================
  # Job de validation Docker
  # ==========================================================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build baseline Docker image
      run: |
        cd docker
        docker build -f baseline/Dockerfile \
          --build-arg MODEL_ID=gpt2 \
          -t inference-optim-baseline:test \
          ..
          
    - name: 🐳 Test baseline container
      run: |
        # Test de base que le container démarre
        docker run --rm inference-optim-baseline:test --help || true
        
    - name: 🧹 Cleanup Docker images
      if: always()
      run: |
        docker image prune -f

  # ==========================================================================
  # Job de vérification de la documentation
  # ==========================================================================
  docs-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📋 Install doc dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        # Si on utilisait Sphinx ou autre outil de doc:
        # pip install sphinx sphinx-rtd-theme
        
    - name: 📝 Check README and docs
      run: |
        # Vérification basique que les fichiers de doc existent
        test -f README.md
        test -f docs/ || mkdir -p docs
        
    - name: 🔍 Validate Python docstrings
      run: |
        python -c "
        import inference_optim_llm.engines.baseline
        import inference_optim_llm.engines.trt
        import inference_optim_llm.core.metrics
        print('Docstrings validation passed')
        "

  # ==========================================================================
  # Job de sécurité (optionnel)
  # ==========================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔒 Run bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r inference_optim_llm/ -f json -o bandit-report.json || true
        
    - name: 🔒 Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

# =============================================================================
# Configuration des notifications et rapports
# =============================================================================
  
  # Job final de consolidation des résultats
  ci-status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, docs-check]
    if: always()
    
    steps:
    - name: 📊 Check CI results
      run: |
        echo "Lint job status: ${{ needs.lint.result }}"
        echo "Test job status: ${{ needs.test.result }}"
        echo "Docker job status: ${{ needs.docker-build.result }}"
        echo "Docs job status: ${{ needs.docs-check.result }}"
        
        # Échec si un job obligatoire a échoué
        if [[ "${{ needs.lint.result }}" == "failure" ]] || [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ CI failed due to lint or test failures"
          exit 1
        fi
        
        echo "✅ CI completed successfully"